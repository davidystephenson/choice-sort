{"version":3,"sources":["../src/isOutputOperation.ts","../src/isFlowComplete.ts","../src/getFloorHalf.ts","../src/getInitialOptionIndex.ts","../src/getOptionIndex.ts","../src/getChoiceOperation.ts","../src/getChoice.ts","../src/operate.ts","../src/createUid.ts","../src/createOperation.ts","../src/addOperation.ts","../src/combineOperations.ts","../src/chooseOption.ts","../src/createFlow.ts","../src/getRanking.ts","../src/importItems.ts","../src/flowTypes.ts"],"sourcesContent":["import { Operation } from './flowTypes'\n\nexport default function isOutputOperation (props: {\n  operation: Operation\n}): boolean {\n  const outputEmpty = props.operation.output.length <= 0\n  if (outputEmpty) {\n    return false\n  }\n\n  const hasAInputs = props.operation.queue.length !== 0\n  if (hasAInputs) {\n    return false\n  }\n\n  const hasBInputs = props.operation.catalog.length !== 0\n  if (hasBInputs) {\n    return false\n  }\n\n  return true\n}\n","import { Flow } from './flowTypes'\nimport isOutputOperation from './isOutputOperation'\n\nexport default function isFlowComplete (props: {\n  flow: Flow\n}): boolean {\n  const operations = Object.values(props.flow.operations)\n\n  if (operations.length === 0) {\n    return Object.keys(props.flow.items).length === 0\n  }\n\n  for (const operation of operations) {\n    if ((operation.queue.length > 0 && operation.catalog.length === 0) ||\n        (operation.queue.length === 0 && operation.catalog.length > 0)) {\n      throw new Error('Operation has only one of the inputs')\n    }\n  }\n\n  for (const operation of operations) {\n    if (operation.queue.length === 0 && operation.catalog.length === 0 && operation.output.length === 0) {\n      throw new Error('Operation has no inputs or outputs')\n    }\n  }\n\n  const outputOperations = operations.filter(operation => isOutputOperation({ operation }))\n\n  if (outputOperations.length > 1) {\n    throw new Error('Flow has multiple output operations')\n  }\n\n  if (operations.length > 1) {\n    return false\n  }\n\n  if (operations.length === 1 && outputOperations.length === 1) {\n    return true\n  }\n\n  return false\n}\n","export default function getFloorHalf (props: {\n  value: number\n}): number {\n  if (typeof props.value !== 'number') {\n    throw new Error('Value must be a number')\n  }\n  const half = props.value / 2\n  const floored = Math.floor(half)\n  return floored\n}\n","import { Operation } from './flowTypes'\nimport getFloorHalf from './getFloorHalf'\n\nexport default function getInitialOptionIndex (props: {\n  operation: Operation\n}): number {\n  const difference = props.operation.catalog.length - 1\n  const half = getFloorHalf({ value: difference })\n  return half\n}\n","import { Operation } from './flowTypes'\nimport getFloorHalf from './getFloorHalf'\nimport getInitialOptionIndex from './getInitialOptionIndex'\n\nexport default function getOptionIndex (props: {\n  operation: Operation\n}): number {\n  if (props.operation.better != null) {\n    if (typeof props.operation.better !== 'number') {\n      throw new Error('Better must be a number')\n    }\n    if (props.operation.better < 1) {\n      throw new Error('Better must be positive')\n    }\n    const initial = getInitialOptionIndex({ operation: props.operation })\n    if (props.operation.better > initial) {\n      throw new Error('Better must be less than or equal to the initial option index')\n    }\n    return getFloorHalf({ value: props.operation.better })\n  }\n\n  return getInitialOptionIndex({ operation: props.operation })\n}\n","import { Flow, Operation } from './flowTypes'\nimport isFlowComplete from './isFlowComplete'\nimport getOptionIndex from './getOptionIndex'\nimport isOutputOperation from './isOutputOperation'\n\nexport default function getChoiceOperation (props: { flow: Flow }): Operation {\n  const operations = Object.values(props.flow.operations)\n\n  if (operations.length === 0) {\n    throw new Error('Flow has no operations')\n  }\n\n  if (isFlowComplete({ flow: props.flow })) {\n    throw new Error('Flow is complete')\n  }\n\n  // First check for non-output operations with option index 0\n  const zeroIndexNonOutputOps = operations.filter(op =>\n    !isOutputOperation({ operation: op }) &&\n    getOptionIndex({ operation: op }) === 0\n  )\n\n  if (zeroIndexNonOutputOps.length > 0) {\n    return zeroIndexNonOutputOps.reduce((earliest, current) =>\n      current.uid < earliest.uid ? current : earliest\n    )\n  }\n\n  // Then find non-output operation with highest option index\n  const nonOutputOps = operations.filter(op => !isOutputOperation({ operation: op }))\n\n  const choiceOperation = nonOutputOps.reduce<Operation | null>((bestOperation, currentOperation) => {\n    const currentIndex = getOptionIndex({ operation: currentOperation })\n    const bestIndex = bestOperation != null\n      ? getOptionIndex({ operation: bestOperation })\n      : -1\n\n    if (currentIndex > bestIndex) {\n      return currentOperation\n    }\n\n    if (currentIndex === bestIndex &&\n        bestOperation != null &&\n        currentOperation.uid < bestOperation.uid) {\n      return currentOperation\n    }\n\n    return bestOperation\n  }, null)\n\n  if (choiceOperation == null) {\n    throw new Error('No operation found')\n  }\n\n  return choiceOperation\n}\n","import { Choice, Flow } from './flowTypes'\nimport isFlowComplete from './isFlowComplete'\nimport getChoiceOperation from './getChoiceOperation'\nimport getOptionIndex from './getOptionIndex'\n\nexport default function getChoice (props: {\n  flow: Flow\n}): Choice | undefined {\n  if (isFlowComplete({ flow: props.flow })) {\n    return undefined\n  }\n\n  try {\n    const selectedOperation = getChoiceOperation({ flow: props.flow })\n\n    if (selectedOperation.queue.length === 0 || selectedOperation.catalog.length === 0) {\n      return undefined\n    }\n\n    const aItem = selectedOperation.queue[0]\n    const optionIndex = getOptionIndex({ operation: selectedOperation })\n    const bItem = selectedOperation.catalog[optionIndex]\n\n    return {\n      queue: aItem,\n      catalog: bItem,\n      operation: selectedOperation.uid\n    }\n  } catch {\n    return undefined\n  }\n}\n","import { Flow } from './flowTypes'\nimport getChoice from './getChoice'\nimport getOptionIndex from './getOptionIndex'\nimport getFloorHalf from './getFloorHalf'\nimport getInitialOptionIndex from './getInitialOptionIndex'\n\nexport default function operate (props: {\n  flow: Flow\n  option: string\n}): Flow {\n  const choice = getChoice({ flow: props.flow })\n  if (choice == null) {\n    throw new Error('Flow has no choice')\n  }\n\n  const operation = props.flow.operations[choice.operation]\n  const optionIndex = getOptionIndex({ operation })\n\n  // Validate option is in choice\n  if (props.option !== choice.queue && props.option !== choice.catalog) {\n    throw new Error('Option is not in the choice')\n  }\n\n  // Validate better if defined\n  if (operation.better != null) {\n    if (typeof operation.better !== 'number') {\n      throw new Error('Better must be a number')\n    }\n    if (operation.better < 1) {\n      throw new Error('Better must be positive')\n    }\n    const initial = getInitialOptionIndex({ operation })\n    if (operation.better > initial) {\n      throw new Error('Better cannot be greater than the initial option index')\n    }\n  }\n\n  // Validate queue length\n  if (operation.queue.length > operation.catalog.length) {\n    throw new Error('Queue cannot be longer than catalog')\n  }\n\n  // Validate catalog length for better\n  if (operation.catalog.length <= 2 && operation.better != null) {\n    throw new Error('Cannot have better defined when catalog is two or less long')\n  }\n\n  const newOperation = { ...operation }\n  const newOperations = { ...props.flow.operations }\n\n  if (props.option === choice.catalog) {\n    // Handle catalog choice\n    if (optionIndex === 0) {\n      newOperation.better = undefined\n      if (operation.queue.length === 1) {\n        // Move queue item to end of output followed by full catalog\n        newOperation.output = [\n          ...operation.output,\n          operation.queue[0],\n          ...operation.catalog\n        ]\n        newOperation.queue = []\n        newOperation.catalog = []\n      } else {\n        // Move first queue item to end of output\n        newOperation.output = [\n          ...operation.output,\n          operation.queue[0]\n        ]\n        newOperation.queue = operation.queue.slice(1)\n      }\n    } else {\n      // Option index > 0\n      if (operation.better == null) {\n        newOperation.better = optionIndex\n      } else {\n        newOperation.better = getFloorHalf({ value: operation.better })\n      }\n    }\n  } else {\n    // Handle queue choice\n    if (operation.catalog.length === 1) {\n      // Move catalog to end of output followed by queue\n      newOperation.output = [\n        ...operation.output,\n        operation.catalog[0],\n        operation.queue[0]\n      ]\n      newOperation.catalog = []\n      newOperation.queue = operation.queue.slice(1)\n      newOperation.better = undefined\n    } else {\n      // Move catalog items through option index to output\n      const catalogToOutput = operation.catalog.slice(0, optionIndex + 1)\n      newOperation.output = [\n        ...operation.output,\n        ...catalogToOutput\n      ]\n      newOperation.catalog = operation.catalog.slice(optionIndex + 1)\n\n      if (operation.better != null) {\n        const difference = operation.better - optionIndex\n        if (difference === 1) {\n          // Move first queue item to output and set better to undefined\n          newOperation.output = [\n            ...newOperation.output,\n            operation.queue[0]\n          ]\n          newOperation.queue = operation.queue.slice(1)\n          newOperation.better = undefined\n          // If queue is now empty, move remaining catalog to output\n          if (newOperation.queue.length === 0) {\n            newOperation.output = [\n              ...newOperation.output,\n              ...newOperation.catalog\n            ]\n            newOperation.catalog = []\n          }\n        } else {\n          // Set better to floor half of (better - 1)\n          newOperation.better = getFloorHalf({ value: operation.better - 1 })\n        }\n      } else {\n        newOperation.better = undefined\n      }\n\n      // Switch queue and catalog if queue is equal or longer\n      if (newOperation.queue.length >= newOperation.catalog.length) {\n        const temp = newOperation.queue\n        newOperation.queue = newOperation.catalog\n        newOperation.catalog = temp\n      }\n    }\n  }\n\n  newOperations[choice.operation] = newOperation\n\n  return {\n    ...props.flow,\n    operations: newOperations\n  }\n}\n","import Rand from 'rand-seed'\n\nexport default function createUid (props: {\n  uid: string\n  count: number\n}): string {\n  const seedString = `${props.uid}-${props.count}`\n  const rand = new Rand(seedString)\n\n  const hexDigits = Array.from({ length: 32 }, () => {\n    const randomValue = Math.floor(rand.next() * 16)\n    return randomValue.toString(16)\n  })\n\n  const uuidSection1 = hexDigits.slice(0, 8).join('')\n  const uuidSection2 = hexDigits.slice(8, 12).join('')\n\n  const versionSection = `4${hexDigits.slice(13, 16).join('')}`\n\n  const variantBase = 8\n  const variantRandomOffset = Math.floor(rand.next() * 4)\n  const variantNumber = variantBase + variantRandomOffset\n  const variantValue = variantNumber.toString(16)\n  const variantSection = `${variantValue}${hexDigits.slice(17, 20).join('')}`\n\n  const uuidSection5 = hexDigits.slice(20, 32).join('')\n\n  return `${uuidSection1}-${uuidSection2}-${versionSection}-${variantSection}-${uuidSection5}`\n}\n","import createUid from './createUid'\nimport { Flow, Operation, OperationDef } from './flowTypes'\n\nexport default function createOperation (props: {\n  flow: Flow\n} & OperationDef): Operation {\n  if (\n    props.queue == null ||\n    props.catalog == null ||\n    props.output == null\n  ) {\n    throw new Error('Operation definition is required')\n  }\n\n  const inputsEmpty = props.queue.length === 0 && props.catalog.length === 0\n  const outputEmpty = props.output.length === 0\n  const empty = inputsEmpty && outputEmpty\n  if (empty) {\n    throw new Error('Operation cannot be empty')\n  }\n\n  const aPresent = props.queue.length > 0\n  const bPresent = props.catalog.length > 0\n  const oneSided = aPresent !== bPresent\n  if (oneSided) {\n    throw new Error('Cannot have input on only one side')\n  }\n\n  if (props.queue.length > props.catalog.length) {\n    throw new Error('queue cannot be longer than catalog')\n  }\n\n  const allUids = [...props.queue, ...props.catalog, ...props.output]\n  const uniqueUids = new Set(allUids)\n  const duplicate = allUids.length !== uniqueUids.size\n  if (duplicate) {\n    throw new Error('Duplicate UIDs in operation')\n  }\n\n  const uid = createUid({\n    uid: props.flow.uid, count: props.flow.count\n  })\n\n  const operation: Operation = {\n    better: undefined,\n    catalog: props.catalog,\n    queue: props.queue,\n    output: props.output,\n    uid\n  }\n\n  return operation\n}\n","import { Flow, Operation } from './flowTypes'\n\nexport default function addOperation (props: {\n  flow: Flow\n  operation: Operation\n}): Flow {\n  if (props.flow == null) {\n    throw new Error('Flow is required')\n  }\n\n  if (props.operation == null) {\n    throw new Error('Operation is required')\n  }\n\n  if (props.flow.operations[props.operation.uid] != null) {\n    throw new Error('Operation UID is not unique')\n  }\n\n  const operations = {\n    ...props.flow.operations,\n    [props.operation.uid]: props.operation\n  }\n\n  const operationCount = props.flow.count + 1\n\n  return {\n    ...props.flow,\n    operations,\n    count: operationCount\n  }\n}\n","import { Flow, Operation } from './flowTypes'\nimport createOperation from './createOperation'\nimport addOperation from './addOperation'\nimport isOutputOperation from './isOutputOperation'\n\nexport default function combineOperations (props: {\n  flow: Flow\n}): Flow {\n  const operations = Object.values(props.flow.operations)\n  const outputOperations = operations.filter(operation => isOutputOperation({ operation }))\n\n  if (outputOperations.length > 2) {\n    throw new Error('Flow has more than two output operations')\n  }\n\n  if (outputOperations.length !== 2) {\n    return props.flow\n  }\n\n  const [first, second] = outputOperations\n  const firstLength = first.output.length\n  const secondLength = second.output.length\n\n  let catalogOperation\n  let queueOperation\n\n  if (firstLength === secondLength) {\n    // If same length, earlier UID goes to catalog\n    if (first.uid < second.uid) {\n      catalogOperation = first\n      queueOperation = second\n    } else {\n      catalogOperation = second\n      queueOperation = first\n    }\n  } else {\n    // If different length, longer goes to catalog\n    if (firstLength > secondLength) {\n      catalogOperation = first\n      queueOperation = second\n    } else {\n      catalogOperation = second\n      queueOperation = first\n    }\n  }\n\n  const newOperation = createOperation({\n    flow: props.flow,\n    catalog: catalogOperation.output,\n    queue: queueOperation.output,\n    output: []\n  })\n\n  const operationsToKeep = Object.entries(props.flow.operations)\n    .filter(([uid]) => uid !== first.uid && uid !== second.uid)\n    .reduce<Record<string, Operation>>((acc, [uid, operation]) => {\n    acc[uid] = operation\n    return acc\n  }, {})\n\n  const flowWithoutOutputOperations = {\n    ...props.flow,\n    operations: operationsToKeep\n  }\n\n  return addOperation({\n    flow: flowWithoutOutputOperations,\n    operation: newOperation\n  })\n}\n","import { Flow } from './flowTypes'\nimport operate from './operate'\nimport combineOperations from './combineOperations'\n\nexport default function chooseOption (props: {\n  flow: Flow\n  option: string\n}): Flow {\n  const chosenFlow = operate({ flow: props.flow, option: props.option })\n  const combinedFlow = combineOperations({ flow: chosenFlow })\n  return combinedFlow\n}\n","import { Flow } from './flowTypes'\n\nexport default function createFlow (props: { uid: string }): Flow {\n  if (props.uid == null) {\n    throw new Error('UID is required')\n  }\n\n  return {\n    count: 0,\n    items: {},\n    operations: {},\n    uid: props.uid\n  }\n}\n","import { Flow, RankingItem } from './flowTypes'\n\nexport default function getRanking (props: {\n  flow: Flow\n}): RankingItem[] {\n  const empty = Object.keys(props.flow.operations).length === 0\n  if (empty) {\n    return []\n  }\n\n  const operations = Object.values(props.flow.operations)\n  const operationItemUids = operations.flatMap(operation => {\n    return [...operation.queue, ...operation.catalog, ...operation.output]\n  })\n\n  const uniqueOperationItemUids = new Set<string | number>()\n  const duplicateUids: Array<string | number> = []\n\n  operationItemUids.forEach(uid => {\n    const duplicate = uniqueOperationItemUids.has(uid)\n    if (duplicate) {\n      duplicateUids.push(uid)\n    } else {\n      uniqueOperationItemUids.add(uid)\n    }\n  })\n\n  const hasDuplicates = duplicateUids.length > 0\n  if (hasDuplicates) {\n    const joined = duplicateUids.join(', ')\n    throw new Error(`Duplicate item UIDs: ${joined}`)\n  }\n\n  const items = Object.values(props.flow.items)\n  const missingOperationItemUids = Array.from(uniqueOperationItemUids).filter(uid => {\n    return !items.some(item => item.uid === uid)\n  })\n\n  const hasMissingOperationItems = missingOperationItemUids.length > 0\n  if (hasMissingOperationItems) {\n    const joined = missingOperationItemUids.join(', ')\n    throw new Error(`Missing items: ${joined}`)\n  }\n\n  const missingItems = items.filter(item => {\n    return !operationItemUids.includes(item.uid)\n  })\n\n  const hasMissingItems = missingItems.length > 0\n  if (hasMissingItems) {\n    const uids = missingItems.map(item => item.uid)\n    const joined = uids.join(', ')\n    throw new Error(`Missing items: ${joined}`)\n  }\n\n  const rankingItemsMap = new Map<string | number, RankingItem>()\n\n  operations.forEach((operation) => {\n    const outputLength = operation.output.length\n\n    operation.output.forEach((outputUid, index) => {\n      const item = props.flow.items[outputUid]\n      rankingItemsMap.set(outputUid, {\n        ...item,\n        points: index,\n        rank: 1\n      })\n    })\n\n    operation.queue.forEach((aInputUid, index) => {\n      const item = props.flow.items[aInputUid]\n      const points = index + outputLength\n      rankingItemsMap.set(aInputUid, {\n        ...item,\n        points,\n        rank: 1\n      })\n    })\n\n    operation.catalog.forEach((bInputUid, index) => {\n      const item = props.flow.items[bInputUid]\n      const better = operation.better != null && operation.better <= index\n      const betterOffset = better ? 1 : 0\n      const points = index + outputLength + betterOffset\n      rankingItemsMap.set(bInputUid, {\n        ...item,\n        points,\n        rank: 1\n      })\n    })\n  })\n\n  const rankingItems = Array.from(rankingItemsMap.values())\n  const pointValues = rankingItems.map(item => item.points)\n  const uniquePointValues = [...new Set(pointValues)]\n  const descendingPointValues = uniquePointValues.sort((a, b) => b - a)\n\n  rankingItems.forEach(item => {\n    const greaterPoints = descendingPointValues.filter(points => points > item.points)\n    item.rank = greaterPoints.length + 1\n  })\n\n  rankingItems.sort((a, b) => {\n    if (a.rank !== b.rank) {\n      return a.rank - b.rank\n    }\n    return a.label.localeCompare(b.label)\n  })\n\n  return rankingItems\n}\n","import { Flow, Item } from './flowTypes'\nimport createOperation from './createOperation'\nimport addOperation from './addOperation'\n\nexport default function importItems (props: {\n  flow: Flow\n  items: Item[]\n}): Flow {\n  if (props.items.length === 0) {\n    throw new Error('Items cannot be empty')\n  }\n\n  const uids = props.items.map(item => item.uid)\n  const uniqueUids = new Set(uids)\n  if (uniqueUids.size !== props.items.length) {\n    throw new Error('Item UIDs must be unique')\n  }\n\n  for (const item of props.items) {\n    if (props.flow.items[item.uid] != null) {\n      throw new Error('Item UIDs must be unique across the entire flow')\n    }\n  }\n\n  const itemsRecord: Record<string, Item> = { ...props.flow.items }\n  for (const item of props.items) {\n    itemsRecord[item.uid] = item\n  }\n\n  const baseFlow: Flow = {\n    ...props.flow,\n    items: itemsRecord\n  }\n\n  if (props.items.length === 1) {\n    const operation = createOperation({\n      queue: [],\n      catalog: [],\n      flow: baseFlow,\n      output: [props.items[0].uid]\n    })\n\n    return addOperation({\n      flow: baseFlow,\n      operation\n    })\n  }\n\n  const items = Object.values(baseFlow.items)\n  const pairCount = Math.floor(items.length / 2)\n  const pairs = Array.from({ length: pairCount }, (_, i) => {\n    const firstIndex = i * 2\n    const secondIndex = i * 2 + 1\n    const firstItem = items[firstIndex]\n    const secondItem = items[secondIndex]\n    return [firstItem, secondItem]\n  })\n\n  const flowWithPairs = pairs.reduce((currentFlow, pair) => {\n    const operation = createOperation({\n      queue: [pair[0].uid],\n      catalog: [pair[1].uid],\n      flow: currentFlow,\n      output: []\n    })\n\n    return addOperation({\n      flow: currentFlow,\n      operation\n    })\n  }, baseFlow)\n\n  const hasRemainingItem = items.length % 2 === 1\n\n  if (!hasRemainingItem) {\n    return flowWithPairs\n  }\n\n  const lastIndex = items.length - 1\n  const remainingItem = items[lastIndex]\n\n  const operation = createOperation({\n    queue: [],\n    catalog: [],\n    flow: flowWithPairs,\n    output: [remainingItem.uid]\n  })\n\n  return addOperation({\n    flow: flowWithPairs,\n    operation\n  })\n}\n","import { z } from 'zod'\n\nexport const itemSchema = z.object({\n  label: z.string(),\n  seed: z.number().optional(),\n  uid: z.string()\n})\nexport type Item = z.infer<typeof itemSchema>\n\nexport const choiceSchema = z.object({\n  catalog: z.string(),\n  operation: z.string(),\n  queue: z.string()\n})\nexport type Choice = z.infer<typeof choiceSchema>\n\nexport const operationSchema = z.object({\n  better: z.number().optional(),\n  catalog: z.array(z.string()),\n  output: z.array(z.string()),\n  queue: z.array(z.string()),\n  uid: z.string()\n})\nexport type Operation = z.infer<typeof operationSchema>\n\nexport const operationDefSchema = z.object({\n  catalog: z.array(z.string()),\n  queue: z.array(z.string()),\n  output: z.array(z.string())\n})\nexport type OperationDef = z.infer<typeof operationDefSchema>\n\nexport const flowSchema = z.object({\n  count: z.number(),\n  items: z.record(z.string(), itemSchema),\n  operations: z.record(z.string(), operationSchema),\n  uid: z.string()\n})\nexport type Flow = z.infer<typeof flowSchema>\n\nconst rankingItemSpecificSchema = z.object({\n  points: z.number(),\n  rank: z.number()\n})\nexport const rankingItemSchema = itemSchema.and(rankingItemSpecificSchema)\nexport type RankingItem = z.infer<typeof rankingItemSchema>\n"],"mappings":"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","names":["operation"]}